#!/usr/bin/python2
# coding=utf-8
# NOTE: THIS PYTHON SOURCE FILE USES TABS DEAL WITH IT
#
# â“’ 2012, Mark Harviston
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# Neither the name of the orgnanization nor the names of its
# contributors may be used to endorse or promote products derived
# from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.

"""
The Main window GUI class, most gui operations here.

*** I REPEAT THIS PYTHON SOURCE FILE USES TABS, DEAL WITH IT ***
"""
import sys
import os.path

from PySide.QtCore import *
from PySide.QtGui import *

#import code generated by gui designer ("View")
from main import Ui_MainWindow
from aboutDialog import Ui_aboutDialog

#import "Model" file
from cardsfile import CardsFile, BlackCard

app = QApplication(sys.argv)

def trace(fn):
	""" decorator Annotate function call with debugging info
	for now, just prints the name of the function, the arguments and returned value"""

	def fn2(*args,**kwargs):
		print('tracing: %s(%r,%r)' % (fn.__name__, args, kwargs))
		r = fn(*args,**kwargs)
		print('returned: %r' % r)
		return r
	return fn2

class AboutDialog(QDialog, Ui_aboutDialog):
	def __init__(self, parent=None):
		super(type(self),self).__init__(parent)

		self.setupUi(self)

		self.okBtn.clicked.connect(self.onOK)

	def onOK(self):
		self.close()

class WhiteCardList(QAbstractListModel):
	def __init__(self, cardsfile):
		super(type(self),self).__init__()
		self.cardsfile = cardsfile

	def headerData(self,col, orientation, role=None):
		if col != 0: raise IndexError()
		return 'Card Text'

	def rowCount(self, parent=None):
		return len(self.cardsfile.whitecards)

	def data(self, index, role=None):
		if index.column() != 0: raise IndexError()
		if index.isValid() and role in (Qt.DisplayRole, Qt.EditRole):
			return self.cardsfile.whitecards[index.row()]
		else:
			return None

	def flags(self,index):
		if index.isValid():
			return Qt.ItemIsEditable | Qt.ItemIsSelectable | Qt.ItemIsDragEnabled | Qt.ItemIsDropEnabled | Qt.ItemIsEnabled
		else:
			return None

	def setData(self, index, data, role=None):
		if index.column() != 0: raise IndexError()
		if index.isValid():
			self.cardsfile.whitecards[index.row()] = data
			return True
		else:
			return False

class BlackCardList(QAbstractTableModel):
	def __init__(self, cardsfile):
		super(type(self),self).__init__()
		self.cardsfile = cardsfile


	def headerData(self, col, orientation, role=None):
		if orientation == Qt.Horizontal and role == Qt.DisplayRole:
			if col == 0:
				return 'Pick'
			elif col == 1:
				return 'Card Text'
			else:
				raise IndexError()
		else:
			return None

	def rowCount(self, parent=None):
		return len(self.cardsfile.blackcards)

	def columnCount(self, parent=None):
		return 2

	def flags(self,index):
		if index.isValid():
			return Qt.ItemIsEditable | Qt.ItemIsSelectable | Qt.ItemIsDragEnabled | Qt.ItemIsDropEnabled | Qt.ItemIsEnabled
		else:
			return None

	def data(self, index, role=None):
		if index.isValid() and role in (Qt.DisplayRole, Qt.EditRole):
			return self.cardsfile.blackcards[index.row()][index.column()]
		else:
			return None

	def setData(self, index, data, role=None):
		if not index.isValid():
			return False

		if index.column() == 0:
			text = self.cardsfile.blackcards[index.row()].text
			self.cardsfile.blackcards[index.row()] = BlackCard(data, text)
		elif index.column() == 1:
			pick = self.cardsfile.blackcards[index.row()].pick
			self.cardsfile.blackcards[index.row()] = BlackCard(pick, data)
		else:
			raise IndexError()

		return True

class ComboBoxDelegate(QStyledItemDelegate):
	"""
	copied extensively from here: http://stackoverflow.com/questions/10037529/custom-delegate-in-pyside
	"""

	def __init__(self, model, parent=None):
		super(ComboBoxDelegate, self).__init__(parent)
		self.parent= parent
		self.model= model

	def createEditor(self, parent, option, index):

		if not index.isValid():
			return False

		if index.column() != 0:
			return super(ComboBoxDelegate, self).createEditor(parent, option, index)

		comboBox = QComboBox(parent)
		comboBox.setModel(self.model)
		value = index.data(Qt.EditRole)
		#self.comboBox.setCurrentIndex(value)

		return comboBox

	def setEditorData(self, editor, index):
		if index.column() != 0:
			return super(ComboBoxDelegate, self).setEditorData(editor, index)
		value = index.data(Qt.EditRole)
		#editor.setCurrentIndex(value)

	def setModelData(self, editor, model, index):
		if index.column() != 0:
			return super(ComboBoxDelegate, self).setModelData(editor, model, index)

		if not index.isValid():
			return False

		#index.model().setData(index, editor.currentIndex(), Qt.EditRole)

class MainWindow(QMainWindow, Ui_MainWindow):
	def __init__(self, parent=None):
		super(type(self),self).__init__(parent)

		self.setupUi(self)

		#initialize model
		self.cardsfile = CardsFile()

		self.whiteModel = WhiteCardList(self.cardsfile)
		self.whiteList.setModel(self.whiteModel)
		
		self.blackModel = BlackCardList(self.cardsfile)
		self.blackList.setModel(self.blackModel)

		#connect signals
		self.addWhiteBtn.clicked.connect(self.addWhiteCard)
		self.removeWhiteBtn.clicked.connect(self.remWhiteCard)
		self.addBlackBtn.clicked.connect(self.addBlackCard)
		self.removeBlackBtn.clicked.connect(self.remBlackCard)

		self.actionNew.triggered.connect(self.menuNew)
		self.actionOpen.triggered.connect(self.menuOpen)
		self.actionSave.triggered.connect(self.menuSave)
		self.actionSaveAs.triggered.connect(self.menuSaveAs)
		self.actionPrintPreview.triggered.connect(self.menuPrintPreview)
		self.actionExportPDF.triggered.connect(self.menuExportPDF)
		self.actionExportFO.triggered.connect(self.menuExportFO)

		self.actionAbout.triggered.connect(self.menuAbout)

		#set item delegate, so blackList uses a combobox for the first column

		combodelegate = ComboBoxDelegate( QStringListModel(['auto','0','1','2']) )

		self.blackList.setItemDelegate(combodelegate)

	def menuAbout(self):
		aboutDlg = AboutDialog(self)
		aboutDlg.show()
		aboutDlg.raise_()

	def addWhiteCard(self):
		pass #TODO

	def remWhiteCard(self):
		pass #TODO

	def addBlackCard(self):
		pass #TODO

	def remBlackCard(self):
		pass #TODO

	def menuNew(self):
		pass #TODO

	def menuOpen(self):
		fileName, _ = QFileDialog.getOpenFileName(self, 'Open Cards Against Humanity File', None, 'Cards Against Humanity File (*.cah, *.xml)')

		self.cardsfile.filename = fileName

		self.cardsfile.importXML(fileName)

		#reload models
		self.whiteList.setModel(None)
		self.blackList.setModel(None)
		self.whiteList.setModel(self.whiteModel)
		self.blackList.setModel(self.blackModel)

	def menuSave(self):
		self.blackModel.submit()
		self.whiteModel.submit()

		if self.cardsfile.filename is not None:
			self.cardsfile.save()
		else:
			self.menuSaveAs()

	def menuSaveAs(self):
		self.blackModel.submit()
		self.whiteModel.submit()

		self.cardsfile.filename = QFileDialog.getSaveFileName(self, 'Save Cards Against Humanity File', \
			self.cardsfile.filename, 'Cards Against Humanity File (*.cah, *.xml)')[0]
		self.cardsfile.save()

	def menuExportPDF(self):
		if self.cardsfile.filename is not None:
			dirname = os.path.dirname(self.cardsfile.filename)
		else:
			dirname = None

		fileName = QFileDialog.getSaveFileName(self, 'Export PDF File', dirname, 'Portable Document Format (*.pdf)')[0]
		self.cardsfile.exportToPDF(fileName)

	def menuExportFO(self):
		if self.cardsfile.filename is not None:
			dirname = os.path.dirname(self.cardsfile.filename)
		else:
			dirname = None

		fileName = QFileDialog.getSaveFileName(self, 'Export XSL Formatting Objects File', dirname, 'XSL Formatting Objects File (*.fo, *.xml)')[0]
		self.cardsfile.exportToFO(fileName)

	def menuPrintPreview(self):
		self.cardsfile.printPreview()

if __name__ == '__main__':
	win = MainWindow()
	win.show()
	win.raise_()

	sys.exit(app.exec_())

	app.exec_()
	sys.exit()
